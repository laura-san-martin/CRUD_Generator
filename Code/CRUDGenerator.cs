using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace LauraStuffs.CRUDGenerator
{
    class Generator
    {
        public static void Generate(string namespaceName, string dirName)
        {
            //Get the current assembly
            Assembly assembly = Assembly.GetExecutingAssembly();

            //Uses reflection to get all the types inside the namespace given
            Type[] types = assembly.GetTypes()
              .Where(t => String.Equals(t.Namespace, namespaceName, StringComparison.Ordinal))
              .ToArray();

            //Checks if it found any types
            if (types != null && types.Any())
            {
                //Character tab, for indent the code
                string tab = "\t";

                //Create the directory if does not exists
                Directory.CreateDirectory(dirName);

                //Loops through all types found in the namespace given
                //I assuming that the first type is the data context generated by Linq to SQL
                for (int i = 1; i < types.Length; i++)
                {
                    //This will write the code into a string so we can save it later
                    StringBuilder sb = new StringBuilder();

                    //All the references used by the code
                    sb.AppendLine("using System;");
                    sb.AppendLine("using System.Collections.Generic;");
                    sb.AppendLine("using System.Linq;");
                    sb.AppendLine("using System.Text;");
                    sb.AppendLine("using System.Threading.Tasks;");
                    sb.AppendLine("using LauraStuffs.CRUDGenerator;");

                    //It creates its own namespace adding the word CRUD after the namespace given
                    sb.AppendLine("namespace " + namespaceName + ".CRUD");
                    sb.AppendLine("{ ");
                    sb.AppendLine(tab + "class model_" + types[i].Name);
                    sb.AppendLine(tab + "{");

                    //This vars will help build the params to the Create and Update functions
                    string param = "";
                    string queryCondition = "";
                    string objName = types[i].Name + "OBJ";
                    StringBuilder sbPropertiesAsParams = new StringBuilder();
                    string propertiesToPassParams = "";
                    PropertyInfo[] properties = types[i].GetProperties();

                    string primaryKeyPropertyAsParam = "";
                    string primaryKeyToPassParams = "";
                    string keyConditions = "";

                    //Loops through all atributes of the types
                    foreach (var prop in properties)
                    {
                        if(prop.CustomAttributes.First().ToString().IndexOf("IDENTITY", StringComparison.InvariantCultureIgnoreCase) >= 0 && 
                           prop.CustomAttributes.First().ToString().IndexOf("IsPrimaryKey = True", StringComparison.InvariantCultureIgnoreCase) >= 0 &&
                           prop.CustomAttributes.First().ToString().IndexOf("IsDbGenerated = True", StringComparison.InvariantCultureIgnoreCase) >= 0)
                        {
                            if (!string.IsNullOrEmpty(primaryKeyPropertyAsParam))
                                primaryKeyPropertyAsParam += ", ";

                            if (!string.IsNullOrEmpty(primaryKeyToPassParams))
                                primaryKeyToPassParams += ", ";

                            if (!string.IsNullOrEmpty(keyConditions))
                                keyConditions += " && ";

                            primaryKeyPropertyAsParam += GetType(prop) + " " + prop.Name;
                            primaryKeyToPassParams += objName + "." + prop.Name;
                            keyConditions += "u." + prop.Name + " == " + prop.Name;
                        }
                        else if (prop.PropertyType.Namespace != namespaceName && prop.PropertyType.FullName.IndexOf("entity", StringComparison.InvariantCultureIgnoreCase) < 0)
                        {
                            string propType = GetType(prop);

                            param += propType + " " + prop.Name + ", ";
                            queryCondition += "new QueryConditions(" + prop.Name + ", OperatorComparer.Equals, \"" + prop.Name + "\"), ";
                            sbPropertiesAsParams.AppendLine(tab + tab + tab + tab + tab + objName + "." + prop.Name + " = " + prop.Name + ";");

                            if (!string.IsNullOrEmpty(propertiesToPassParams))
                                propertiesToPassParams += ", ";
                            propertiesToPassParams += objName + "." + prop.Name;
                        }

                    }

                    //Write a auxiliar params code to be useed further
                    param = param.Substring(0, param.Length - 2);
                    queryCondition = queryCondition.Substring(0, queryCondition.Length - 2);

                    //Writes the CREATE function
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " Create(" + param + ")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + namespaceName + "." + types[i].Name + " " + objName + " = ReadWhereFirst(" + queryCondition + ");");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + "if (" + objName + " == null)");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + "try");
                    sb.AppendLine(tab + tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + tab + types[0].Name + " context = new " + types[0].Name + "();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + tab + objName + " = new " + namespaceName + "." + types[i].Name + "();");
                    sb.AppendLine("");
                    sb.AppendLine(sbPropertiesAsParams.ToString());
                    sb.AppendLine(tab + tab + tab + tab + tab + "context." + types[i].Name + ".InsertOnSubmit(" + objName + ");");
                    sb.AppendLine(tab + tab + tab + tab + tab + "context.SubmitChanges();");
                    sb.AppendLine(tab + tab + tab + tab + tab + "return " + objName + ";");
                    sb.AppendLine(tab + tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + tab + "catch (Exception error)");
                    sb.AppendLine(tab + tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + tab + "Console.WriteLine(\"EXCEPTION!!! \" + \"Class: \" + \"mdl_" + types[i].Name + "\" + \" Function: \" + \"Create\");");
                    sb.AppendLine(tab + tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "return " + objName + ";");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes a secondary CREATE function the calls the one written above
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " Create(" + namespaceName + "." + types[i].Name + " " + objName + ")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "return Create(" + propertiesToPassParams +");");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes the READ FIRST function
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " ReadWhereFirst(params QueryConditions[] conditions)");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "IEnumerable<" + namespaceName + "." + types[i].Name + "> list = ReadAllWhere(conditions);");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + "if (list != null && list.Any())");
                    sb.AppendLine(tab + tab + tab + tab + "return list.First();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + "return null;");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes the READ LAST function
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " ReadWhereLast(params QueryConditions[] conditions)");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "IEnumerable<" + namespaceName + "." + types[i].Name + "> list = ReadAllWhere(conditions);");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + "if (list != null && list.Any())");
                    sb.AppendLine(tab + tab + tab + tab + "return list.Last();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + "return null;");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes the READ ALL function
                    sb.AppendLine(tab + tab + "static public IEnumerable<" + namespaceName + "." + types[i].Name + "> ReadAllWhere(params QueryConditions[] conditions)");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "try");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + types[0].Name + " context = new " + types[0].Name + "();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "IQueryable <" + namespaceName + "." + types[i].Name + "> query = context." + types[i].Name + ";");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "foreach (QueryConditions q in conditions)");
                    sb.AppendLine(tab + tab + tab + tab + tab + "query = query.Where(ExpressionBuilder.BuildPredicate<" + types[i].Name + ">(q.value, q.comparer, q.properties));");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "if (query.Any())");
                    sb.AppendLine(tab + tab + tab + tab + tab + "return query;");
                    sb.AppendLine(tab + tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "catch (Exception erro)");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + "Console.WriteLine(\"EXCEPTION!!! \" + \"Class: \" + \"mdl_" + types[i].Name + "\" + \" Function: \" + \"ReadAllWhere\");");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "return null;");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes the UPDATE function
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " Update(" + primaryKeyPropertyAsParam + ", " + param + ")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "try");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + types[0].Name + " context = new " + types[0].Name + "();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "var query = from u in context." + types[i].Name + " where " + keyConditions + " select u;");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "if (query.Any())");
                    sb.AppendLine(tab + tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + tab + namespaceName + "." + types[i].Name + " " + objName + " = query.First();");
                    sb.AppendLine("");
                    sb.AppendLine(sbPropertiesAsParams.ToString());
                    sb.AppendLine(tab + tab + tab + tab + tab + "context.SubmitChanges();");
                    sb.AppendLine(tab + tab + tab + tab + tab + "return " + objName + ";");
                    sb.AppendLine(tab + tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "catch (Exception error)");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + "Console.WriteLine(\"EXCEPTION!!! \" + \"Class: \" + \"mdl_" + types[i].Name + "\" + \" Function: \" + \"Update\");");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "return null;");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes a secondary UPDATE function the calls the one written above
                    sb.AppendLine(tab + tab + "static public " + namespaceName + "." + types[i].Name + " Update(" + namespaceName + "." + types[i].Name + " " + objName + ")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "return Update(" + primaryKeyToPassParams + ", " + propertiesToPassParams + ");");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");

                    //Writes the DELETE function
                    sb.AppendLine(tab + tab + "static public bool Delete("+ primaryKeyPropertyAsParam +")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "try");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + types[0].Name + " context = new " + types[0].Name + "();");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "var query = from u in context." + types[i].Name + " where " + keyConditions + " select u;");
                    sb.AppendLine("");
                    sb.AppendLine(tab + tab + tab + tab + "if (query.Any())");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + tab + "context." + types[i].Name + ".DeleteOnSubmit(query.First());");
                    sb.AppendLine(tab + tab + tab + "return true;");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "catch (Exception error)");
                    sb.AppendLine(tab + tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + tab + "Console.WriteLine(\"EXCEPTION!!! \" + \"Class: \" + \"mdl_" + types[i].Name + "\" + \" Function: \" + \"Delete\");");
                    sb.AppendLine(tab + tab + tab + "}");
                    sb.AppendLine(tab + tab + tab + "return false;");
                    sb.AppendLine(tab + tab + "}");
                    sb.AppendLine("");
                    //Writes a secondary DELETE function the calls the one written above
                    sb.AppendLine(tab + tab + "static public bool Delete(" + namespaceName + "." + types[i].Name + " " + objName + ")");
                    sb.AppendLine(tab + tab + "{");
                    sb.AppendLine(tab + tab + tab + "return Delete(" + primaryKeyToPassParams + ");");
                    sb.AppendLine(tab + tab + "}");
                    //Closes the code
                    sb.AppendLine(tab + "}");
                    sb.AppendLine("}");



                    //Save the code file
                    string filePath = dirName + " / " + "model_" + types[i].Name + ".cs";
                    File.WriteAllText(filePath, sb.ToString());

                }
            }
        }

        //this function converts the type used in SLQ to the equivalent type in C#
        private static string GetType(PropertyInfo prop)
        {
            string propType = "string";

            //This checks what type the atribute is, looking for common types used in the data base
            if (!prop.PropertyType.FullName.Contains("string"))
            {
                if (prop.PropertyType.FullName.IndexOf("bool", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "bool";
                else if (prop.PropertyType.FullName.IndexOf("byte", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "byte";
                else if (prop.PropertyType.FullName.IndexOf("int", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "int";
                else if (prop.PropertyType.FullName.IndexOf("double", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "double";
                else if (prop.PropertyType.FullName.IndexOf("decimal", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "decimal";
                else if (prop.PropertyType.FullName.IndexOf("binary", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "binary";
                else if (prop.PropertyType.FullName.IndexOf("DateTime", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "DateTime";
                else if (prop.PropertyType.FullName.IndexOf("TimeSpan", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "TimeSpan";
                else if (prop.PropertyType.FullName.IndexOf("DateTimeOffset", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "DateTimeOffset";
                else if (prop.PropertyType.FullName.IndexOf("Guid", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "Guid";
                else if (prop.PropertyType.FullName.IndexOf("char", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType = "char";

                if (prop.PropertyType.FullName.IndexOf("null", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    propType += "?";
            }

            return propType;
        }
    }
}
